===================================
Spy Cat Agency Management System
===================================

Цей проєкт є CRUD-додатком для управління шпигунськими місіями та котами для агентства Spy Cat Agency.

Проєкт створений на **Django** та використовує **PostgreSQL** для зберігання даних. Всі компоненти розгортаються за допомогою **Docker**.

.. image:: image\Preview.png
   :alt: Screenshot of the application
   :align: center
   :width: 600px



---------------------
1. Налаштування .env
---------------------

Спершу створіть файл ``.env`` у кореневій директорії проєкту та додайте такі параметри:

.. code-block:: plaintext

    DB_NAME=spy_cat_agency       # Назва бази даних
    DB_USER=catsecret            # Ім'я користувача бази даних
    DB_PASSWORD=123456w          # Пароль користувача
    DB_HOST=db                   # Хост (Docker-сервіс для PostgreSQL)
    DB_PORT=5432                 # Порт для підключення до бази даних

------------------------------
2. Запуск Docker-контейнерів
------------------------------

Щоб створити та запустити Docker-контейнери, виконайте команду:

.. code-block:: bash

    docker-compose up --build

Ця команда виконає наступне:
- Збере образи Docker для Django (web) і PostgreSQL (db).
- Запустить контейнери для вебсервера Django та бази даних PostgreSQL.

Після успішного запуску сервер Django буде доступний за адресою:

.. code-block:: plaintext

    http://localhost:8000

---------------------------------
3. Виконання міграцій бази даних
---------------------------------

Після запуску контейнерів необхідно створити структуру бази даних.

**3.1. Створення файлів міграцій**:

.. code-block:: bash

    docker-compose exec web poetry run python manage.py makemigrations

**3.2. Застосування міграцій**:

.. code-block:: bash

    docker-compose exec web poetry run python manage.py migrate

Ці команди виконають наступне:
- ``makemigrations``: Створить файли міграцій для моделей.
- ``migrate``: Застосує ці міграції до бази даних PostgreSQL.

-------------------------------------
4. Створення суперкористувача Django
-------------------------------------

Щоб отримати доступ до адміністративної панелі Django, створіть суперкористувача:

.. code-block:: bash

    docker-compose exec web poetry run python manage.py createsuperuser

Дотримуйтесь інструкцій для введення імені користувача, електронної пошти та пароля.

---------------------------------
5. Зупинка контейнерів Docker
---------------------------------

Щоб зупинити контейнери без їх видалення, виконайте:

.. code-block:: bash

    docker-compose down

---------------------------------------
6. Додаткові команди для розробників
---------------------------------------

**Перевірка статусу контейнерів**:

.. code-block:: bash

    docker-compose ps

**Перегляд логів контейнера ``web``**:

.. code-block:: bash

    docker-compose logs web

**Перевірка структури міграцій**:

.. code-block:: bash

    docker-compose exec web poetry run python manage.py showmigrations

---------------------
7. Основні інструменти
---------------------

- **Мова програмування**: Python 3.11
- **Фреймворк**: Django + Django Rest Framework
- **База даних**: PostgreSQL
- **Оркестрація**: Docker, Docker Compose
- **Пакетний менеджер**: Poetry

--------------------------
8. Сторонні залежності
--------------------------

Всі залежності вказані у файлі ``pyproject.toml`` та встановлюються через Poetry під час збірки образу Docker.
